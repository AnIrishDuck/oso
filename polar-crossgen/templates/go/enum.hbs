// {{name}} enum
type {{name}}Variant interface {
    is{{name}}()
}

type {{name}} struct {
    {{name}}Variant
}


func (result *{{name}}) UnmarshalJSON(b []byte) error {
    var rawMap map[string]json.RawMessage
    
    err := json.Unmarshal(b, &rawMap)
    if err != nil { return err }

    if len(rawMap) != 1 {
        return errors.New("Deserializing {{name}} as an enum variant; expecting a single key")
    }

    for k, v := range rawMap {
        switch k {
        {{#each variants}}
        case "{{this}}":
            var variant {{../name}}{{this}}
            err := json.Unmarshal(v, &variant);
            *result = {{../name}} { &variant }
            return err
        {{/each}}
        default:
            return fmt.Errorf("Unknown variant for {{../name}}: %s", k)
        }
    }
    return fmt.Errorf("unreachable")
}


func (variant {{name}}) MarshalJSON() ([]byte, error) {
    switch inner := variant.{{name}}Variant.(type) {
    {{#each variants}}
    case *{{../name}}{{this}}:
        return json.Marshal(map[string]*{{../name}}{{this}} { 
            "{{this}}": inner,
        });
    {{/each}}
    }

    return nil, fmt.Errorf("unexpected variant of %v", variant)
}
